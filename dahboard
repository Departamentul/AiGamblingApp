import React, { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Table } from "@/components/ui/table";
import axios from "axios";

const API_KEY = "4dc44be3808f4b89b7ec34fce89b44e0";
const SPORTS_DATA_API = "https://api.sportsdata.io/v4/soccer/scores/json/GamesByDate/2024-MAR-17";
const BACKEND_API = "https://your-deployed-backend.com"; // Hardcoded to avoid process.env issue

export default function GamblingDashboard() {
  const [stats, setStats] = useState([]);
  const [recommendations, setRecommendations] = useState([]);

  useEffect(() => {
    fetchStats();
    fetchRecommendations();
  }, []);

  const fetchStats = async () => {
    try {
      const response = await axios.get(SPORTS_DATA_API, {
        headers: { "Ocp-Apim-Subscription-Key": API_KEY },
      });
      setStats(response.data);
    } catch (error) {
      console.error("Error fetching stats:", error);
      setStats([]); // Fallback to empty data to prevent crashes
    }
  };

  const fetchRecommendations = async () => {
    try {
      const response = await axios.get(`${BACKEND_API}/recommendations`);
      setRecommendations(response.data);
    } catch (error) {
      console.error("Error fetching recommendations:", error);
      setRecommendations([]);
    }
  };

  return (
    <div className="p-6 grid gap-6">
      <h1 className="text-2xl font-bold">📊 AI Gambling Dashboard</h1>
      
      <Card>
        <CardContent>
          <h2 className="text-xl font-semibold">🔹 Statistici Live</h2>
          {stats.length > 0 ? (
            <Table>
              <thead>
                <tr>
                  <th>Meci</th>
                  <th>Scor</th>
                  <th>Stare</th>
                </tr>
              </thead>
              <tbody>
                {stats.map((game, index) => (
                  <tr key={index}>
                    <td>{game.HomeTeam + " vs " + game.AwayTeam || "N/A"}</td>
                    <td>{game.FinalScore || "In progress"}</td>
                    <td>{game.Status || "N/A"}</td>
                  </tr>
                ))}
              </tbody>
            </Table>
          ) : (
            <p>🔄 Încărcare date...</p>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardContent>
          <h2 className="text-xl font-semibold">💡 Recomandări AI</h2>
          {recommendations.length > 0 ? (
            <ul>
              {recommendations.map((rec, index) => (
                <li key={index} className="mb-2">⚽ {rec.prediction || "N/A"}</li>
              ))}
            </ul>
          ) : (
            <p>🔄 Încărcare recomandări...</p>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
